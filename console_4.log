function Calc(){
	function add(a,b){
		return a+b;
	}
	function sub(a,b){
		return a-b;
	}
};
undefined
function Calc(){
	function add(a,b){
		return a+b;
	}
	function sub(a,b){
		return a-b;
	}
}
undefined
function Calc(){
	function add(a,b){
		return a+b;
	}
	function sub(a,b){
		return a-b;
	}
	return [add,sub];
}
undefined
var m = Calc();
undefined
m
(2) [ƒ, ƒ]
m[0](1,2);
3
m[1](1,2);
-1
function Calc(a,b){
	function add(){
		return a+b;
	}
	function sub(){
		return a-b;
	}
	return [add,sub];
}
undefined
var m = Calc();
undefined
m
(2) [ƒ, ƒ]
m[0]();
NaN
var m = Calc(1,2);
undefined
m[0]();
3
function Calc(a,b){
	var a1 = a;
	var b1 = b;
	function add(){
		return a1+b1;
	}
	function sub(){
		return a1-b1;
	}
	return [add,sub];
}
undefined
var m = Calc(1,2);
undefined
m[0]();
3
m[1]();
-1
function Test(){
	console.log(this);
}
undefined
Test();
VM773:2 Window {parent: Window, postMessage: ƒ, blur: ƒ, focus: ƒ, close: ƒ, …}
undefined
name
""
name = "vikrant";
"vikrant"
var name;
name ="vikrant";
"vikrant"
window.name
"vikrant"
function Test(){
	console.log(this.name);
}
undefined
Test();
VM1001:2 vikrant
undefined
var obj = {
	name:'vikas',
	print:function(){
		console.log(this.name);
	}
}
undefined
obj.print();
VM1156:4 vikas
undefined
window.Test();
VM1001:2 vikrant
undefined
var obj = {
	name:'vikas',
	print:() => {
		console.log(this.name);
	}
}
undefined
obj.print();
VM1266:4 vikrant
undefined
Test();
VM1001:2 vikrant
undefined
Test.apply
ƒ apply() { [native code] }
Test instanceof Object;
true
console.dir(Test);
VM1552:1 ƒ Test()arguments: nullcaller: nulllength: 0name: "Test"prototype: {constructor: ƒ}constructor: ƒ Test()arguments: nullcaller: nulllength: 0name: "Test"prototype: {constructor: ƒ}__proto__: ƒ ()[[FunctionLocation]]: VM1001:1[[Scopes]]: Scopes[1]__proto__: Objectconstructor: ƒ Object()arguments: (...)assign: ƒ assign()caller: (...)create: ƒ create()defineProperties: ƒ defineProperties()defineProperty: ƒ defineProperty()entries: ƒ entries()freeze: ƒ freeze()fromEntries: ƒ fromEntries()getOwnPropertyDescriptor: ƒ getOwnPropertyDescriptor()getOwnPropertyDescriptors: ƒ getOwnPropertyDescriptors()getOwnPropertyNames: ƒ getOwnPropertyNames()getOwnPropertySymbols: ƒ getOwnPropertySymbols()getPrototypeOf: ƒ getPrototypeOf()is: ƒ is()isExtensible: ƒ isExtensible()isFrozen: ƒ isFrozen()isSealed: ƒ isSealed()keys: ƒ keys()length: 1name: "Object"preventExtensions: ƒ preventExtensions()prototype: {constructor: ƒ, __defineGetter__: ƒ, __defineSetter__: ƒ, hasOwnProperty: ƒ, __lookupGetter__: ƒ, …}seal: ƒ seal()setPrototypeOf: ƒ setPrototypeOf()values: ƒ values()__proto__: ƒ ()[[Scopes]]: Scopes[0]hasOwnProperty: ƒ hasOwnProperty()isPrototypeOf: ƒ isPrototypeOf()propertyIsEnumerable: ƒ propertyIsEnumerable()toLocaleString: ƒ toLocaleString()toString: ƒ toString()valueOf: ƒ valueOf()__defineGetter__: ƒ __defineGetter__()__defineSetter__: ƒ __defineSetter__()__lookupGetter__: ƒ __lookupGetter__()__lookupSetter__: ƒ __lookupSetter__()get __proto__: ƒ __proto__()set __proto__: ƒ __proto__()__proto__: ƒ ()apply: ƒ apply()arguments: (...)bind: ƒ bind()call: ƒ call()caller: (...)constructor: ƒ Function()length: 0name: ""toString: ƒ toString()Symbol(Symbol.hasInstance): ƒ [Symbol.hasInstance]()get arguments: ƒ ()set arguments: ƒ ()get caller: ƒ ()set caller: ƒ ()__proto__: Object[[FunctionLocation]]: <unknown>[[Scopes]]: Scopes[0][[FunctionLocation]]: VM1001:1[[Scopes]]: Scopes[1]0: Global {parent: Window, postMessage: ƒ, blur: ƒ, focus: ƒ, close: ƒ, …}
undefined
var t = new Test();
VM1001:2 undefined
undefined
typeof t
"object"
Test.apply
ƒ apply() { [native code] }
Test.bind
ƒ bind() { [native code] }
Test.call
ƒ call() { [native code] }
Test();
VM1001:2 vikrant
undefined
Test.apply(obj);
VM1001:2 vikas
undefined
Test.call(obj);
VM1001:2 vikas
undefined
Test();
VM1001:2 vikrant
undefined
var m = Test.bind(obj);
undefined
m();
VM1001:2 vikas
undefined
m
ƒ Test(){
	console.log(this.name);
}
Test = Test.bind(obj);
ƒ Test(){
	console.log(this.name);
}
Test();
VM1001:2 vikas
undefined
Test();
VM1001:2 vikas
undefined
Test();
VM1001:2 vikas
undefined
obj.name = "train";
"train"
Test();
VM1001:2 train
undefined
obj
{name: "train", print: ƒ}
obj.Test = function(){
	console.log('inside obj ',this.name);
}
ƒ (){
	console.log('inside obj ',this.name);
}
Test();
VM1001:2 train
undefined
obj.Test();
VM2233:2 inside obj  train
undefined
